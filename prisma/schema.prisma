datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  email             String?       @unique
  firstName         String
  userName          String        @unique
  lastName          String
  phoneNumber       Int
  verified          Boolean       @default(false)
  FollowedStores    Store[]       @relation("FollowedBy", fields: [followedStoresIDs], references: [id])
  followedStoresIDs String[]      @db.ObjectId
  comment           Comment[]
  rate              Rate[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  like              Like[]
  role              Role          @default(Default)
  userInfo          UserInfo?
  messagesSent      Message[]     @relation("SentMessage")
  messagesReceived  Message[]     @relation("ReceivedMessage")
  hashedPassword    String
  productLike       ProductLike[] @relation(fields: [productIds], references: [id])
  productIds        String[]      @db.ObjectId
  store             Store?
  Order             Order[]
}

model Location {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  info           String?
  region         String?
  name           String
  street         String?
  googleLocation String?
  cityId         String?    @db.ObjectId
  City           City?      @relation(fields: [cityId], references: [id])
  userInfoId     String?    @db.ObjectId
  UserInfo       UserInfo[]
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderItems  OrderItem[]
  // locationId String
  cityName    String
  info        String?
  Cities      City?       @relation(fields: [cityId], references: [id])
  cityId      String      @db.ObjectId
  items       Int         @default(0)
  totalPrice  Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  state       OrderState? @default(UnderReview)
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?     @db.ObjectId
  barcode     String      @unique
  fullName    String
  phoneNumber Int
  readonly    Boolean     @default(true)
}

model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  qty         Int
  skuId       String  @db.ObjectId
  productName String
  colorName   String
  price       Int
  barcode     String
  Order       Order?  @relation(fields: [orderId], references: [id])
  orderId     String? @db.ObjectId
  Sku         Sku     @relation(fields: [skuId], references: [id])
}

model UserInfo {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  verfivicationImgs String[]
  birthday          DateTime?
  info              String?
  user              User?     @relation(fields: [userId], references: [id])
  userId            String?   @unique @db.ObjectId
  Location          Location? @relation(fields: [locationId], references: [id])
  locationId        String[]  @db.ObjectId
  gender            Gender    @default(Man)
}

///

model Store {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  ads             Ads?
  phone           Int?
  name            String
  logo            String?
  backgroundColor String?
  bio             String?
  views           Int       @default(0)
  like            Like[]
  followedBy      User[]    @relation("FollowedBy", fields: [followedByIDs], references: [id])
  followedByIDs   String[]  @db.ObjectId
  products        Product[]

  // comment         Comment[]
  // Rate            Rate[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owener    User?    @relation(fields: [owenerId], references: [id])
  owenerId  String   @unique @db.ObjectId
  verified  Boolean  @default(false)
  freeShip  Boolean  @default(true)
}

model Product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  store         Store?       @relation(fields: [storeId], references: [id])
  storeId       String?      @db.ObjectId
  name          String
  description   String?
  originalPrice Int?
  price         Int
  // alot of images;
  imgs          String[]
  views         Int          @default(0)
  // needs to be removed of dashboard;
  // sku           Sku[]
  categories    Category[]   @relation(fields: [categoryIds], references: [id])
  categoryIds   String[]     @db.ObjectId
  // discount      Discount?     @relation(fields: [discountId], references: [id])
  // discountId    String?       @unique @db.ObjectId
  likes         Like[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accepted      Boolean      @default(false)
  barcode       String       @unique
  sizes         Size[]
  videos        String[]
  // Discount      Discount[]
  rates         Rate[]
  ProductLike   ProductLike?
  verified      Boolean      @default(false)
}

model AssembleRequest {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  assemble  AssembleProduct[]
  storeId   String
  status    AssembleStatus    @default(Pending)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model AssembleProduct {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  img         String
  nameOfColor String
  skuId       String
  barcode     String
  qty         Int
  Request     AssembleRequest? @relation(fields: [requestId], references: [id])
  requestId   String?          @db.ObjectId
}

//  each size has colors and qtys;
model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  sku       Sku[]
  name      String
}

// product like lists
model ProductLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @unique @db.ObjectId
  user      User[]   @relation(fields: [userIds], references: [id])
  userIds   String[] @db.ObjectId
}

// future discount
// model Discount {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   value      Int
//   ratio      Int
//   expiration DateTime
//   Product    Product? @relation(fields: [productId], references: [id])
//   productId  String?  @db.ObjectId
// }

//
model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  img        String?
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
  // if main category or not
  userId     String?
  // userId     String    @db.ObjectId
  main       Boolean?  @default(false)
}

model Sku {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  // verified by admins
  verified    ProductState @default(Pending)
  color       String
  Size        Size?        @relation(fields: [sizeId], references: [id])
  sizeId      String?      @db.ObjectId
  qty         Int          @default(0)
  newQty      Int          @default(0)
  nameOfColor String       @default("تلقائي")
  barcode     String       @unique
  OrderItems  OrderItem[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  stars     Int      @default(0)
}

model Ads {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  imgs    String[]
  store   Store?   @relation(fields: [storeId], references: [id])
  storeId String?  @unique @db.ObjectId
  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Message {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  sender     User?   @relation("SentMessage", fields: [senderId], references: [id])
  receiver   User?   @relation("ReceivedMessage", fields: [receiverId], references: [id])
  senderId   String? @unique @db.ObjectId
  receiverId String? @unique @db.ObjectId
}

model City {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  min      Int        @default(1)
  max      Int        @default(3)
  name     String
  gender   Gender     @default(Man)
  price    Int        @default(5)
  Order    Order[]
  Location Location[]

  @@map("City")
}

model Employee {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  verifactionImgs String[]
  role            EmployeeRole @default(Employee)
  phoneNumber     Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Salaries        Salary[]
  Debts           Debt[]
  //last salary date let's keep savin it when ever add new salary update it with new date value
  lastSalaryDate  DateTime?
  salaryAmount    Int?         @default(0)
}

model Salary {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  amount     Int
  status     SalaryStatus @default(Pended)
  Employee   Employee?    @relation(fields: [employeeId], references: [id])
  employeeId String?      @db.ObjectId
}

model Debt {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  amount     Int
  Employee   Employee?  @relation(fields: [employeeId], references: [id])
  employeeId String?    @db.ObjectId
  status     DebtStatus @default(Still)
}

enum DebtStatus {
  //still didn't return the money back
  Still
  Retured
}

enum SalaryStatus {
  Pended
  Taken
}

enum EmployeeRole {
  Manger
  Admin
  Employee
}

enum Gender {
  Man
  Woman
}

enum OrderState {
  UnderReview
  Processing
  Enroute
  Delivered
}

enum Role {
  Default
  Seller
  Delivery
}

enum ProductState {
  Pending
  Sent
  Working
}

enum AssembleStatus {
  Pending
  Done
}
